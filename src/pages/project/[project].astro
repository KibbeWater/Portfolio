---
import Image from 'astro/components/Image.astro';

import Layout from '../../layouts/Layout.astro';

import Twatter from '../../assets/Project/Twatter.png';
import ReturnDislikes from '../../assets/Project/ReturnDislikes.png';
import Skippy from '../../assets/Project/Skippy.png';
import SHL from '../../assets/Project/SHL.png';

import GitHub from '../../assets/Socials/Github.svg';
import Globe from '../../assets/Socials/Globe.svg';
import AppStore from '../../assets/Socials/AppStore.svg';

import ArrowBack from '../../assets/Icons/ArrowBack.svg';

export function getStaticPaths() {
    const projectNames = ['twatter', 'shl', 'return-dislikes', 'skippy'];
    return projectNames.map((name) => ({ params: { project: name } }));
}

const { project } = Astro.params;

const projects: {
    [key: string]: {
        title: string;
        image: ImageMetadata;
        shortDescription: string;
        description: string;
        socials: { icon: ImageMetadata; name: string; href: string }[];
    };
} = {
    twatter: {
        title: 'Twatter',
        image: Twatter,
        shortDescription:
            'Twatter is a social media platform that allows users to post tweets, follow other users, and like tweets. It was built using React, Node.js, and MongoDB.',
        description:
            "Twatter is my learning playground, it features a wide variety of different technologies to build a modern social media platform. Some of the stand-out features of the platform is Video/Image sharing, private DMs, custom built User Account system with full profile customization which has some basic AI integrations. Videos and Images are stored, encoded and served from AWS using S3 and MediaConvert, emails are also managed and sent using AWS SES. The website is built using Next.js and it's new App Router using the T3 stack",
        socials: [
            {
                icon: Globe,
                name: 'Website',
                href: 'https://twatter.kibbewater.com',
            },
            {
                icon: GitHub,
                name: 'GitHub',
                href: 'https://github.com/KibbeWater/Twatter',
            },
        ],
    },
    'return-dislikes': {
        title: 'Return Dislikes',
        image: ReturnDislikes,
        shortDescription:
            'Safari port of the return-youtube-dislikes project. Will add back the dislike counter on youtube videos after the 2021 removal of the dislike counter',
        description:
            "Return Dislikes observes the webpage when you visit YouTube and navigate around, it presented a unique set of challenges due to it' SPA-esque behaviour, A/B testing and wide set of dynamic animations that YouTube provides. The extension will attach listeners to figure out when the dislike button has changed or been removed so that our injected text won't dissapear when we interact with the webpage",
        socials: [
            {
                icon: GitHub,
                name: 'GitHub',
                href: 'https://github.com/KibbeWater/YoutubeDislikes',
            },
            {
                icon: AppStore,
                name: 'AppStore',
                href: 'https://apps.apple.com/app/return-dislikes/id6605923430',
            },
        ],
    },
    skippy: {
        title: 'Skippy',
        image: Skippy,
        shortDescription:
            'Skippy, a Safari extension, automatically seeks past ads. Unlike other adblockers, it acts like an ad skipper to avoid adblocker detections.',
        description:
            'Adblockers works by scanning the traffic which is generated by a site when you navigate the internet, they will compare it to a set of blacklists which decide if a URL might contain ads. This is why they work on any webpage, including YouTube which will fall back to not playing the ad. However, in a recent YouTube update they have begun blocking people who use ad-blockers to force them to disable it on YouTube. Adblockers have however found a way to bypass this, but how can we solve this problem by not blocking the ads? We can instead find out when an Ad is playing, and due to it\'s nature of just being a normal video, seek the video forward to where the ad is finished. Essentially "blocking" or "skipping" the ad. This was my motivating when developing and distributing Skippy, a new way of skipping YouTube ads',
        socials: [
            {
                icon: GitHub,
                name: 'GitHub',
                href: 'https://github.com/KibbeWater/Skippy',
            },
            {
                icon: AppStore,
                name: 'AppStore',
                href: 'https://apps.apple.com/app/skippy-for-youtube/id6636553642',
            },
        ],
    },
    shl: {
        title: 'SHL Matchtracker',
        image: SHL,
        shortDescription:
            'SHL is an iOS app that allows users to view the current standings, schedule, and statistics for the Swedish Hockey League. It was built using Swift and SwiftUI with a TypeScript backend.',
        description: [
            'The app was originally a hobby/prototype project of mine to capture event updates from an Event Stream. I then picked it up as a school project instead, developing it to bring the SHL website (and some more) into an convenient and a beatiful app for your phone. The app is also intended to integrate as much as possible into iOS with features such as Live Activities',
        ].join('\n'),
        socials: [
            {
                icon: GitHub,
                name: 'GitHub',
                href: 'https://github.com/KibbeWater/SHL',
            },
            {
                icon: AppStore,
                name: 'AppStore',
                href: 'https://apps.apple.com/app/shl-matchtracker/id6479990812',
            },
        ],
    },
};

const { title, image, shortDescription, description, socials } =
    projects[project];
---

<Layout title=`Project: ${title}`>
    <main
        class='w-screen min-h-[100dvh] bg-gradient-to-br from-orange-300 to-orange-400 flex justify-center items-center relative'
    >
        <button
            transition:name='nav'
            transition:animate='fade'
            class='absolute top-4 left-4 w-8 h-8 p-[.375rem] rounded-full bg-white/25 border border-white/[0.18] drop-shadow hover:bg-white/30 hover:drop-shadow-xl hover:-translate-y-1 transition-all backdrop-blur-sm'
            onclick='history.back()'
        >
            <Image src={ArrowBack} class='w-full h-full' alt='Back' />
        </button>
        <div
            class='md:w-9/12 h-4/6 md:px-4 w-full px-8 py-4 rounded-3xl md:bg-white/25 md:border md:border-white/[0.18] md:shadow-lg md:backdrop-blur-sm flex flex-col md:flex-row gap-8 md:items-start items-center'
        >
            <div class='flex-none flex flex-col gap-6'>
                <Image
                    src={image}
                    alt={title}
                    class='h-64 w-64 rounded-2xl object-cover'
                    transition:name=`project-icon-${project}`
                    transition:animate={'fade'}
                />
                <div>
                    <h3 class='mb-2 text-3xl font-semibold'>Socials</h3>
                    <div class='flex gap-2'>
                        {
                            socials.map(({ icon, name, href }) => (
                                <a
                                    href={href}
                                    target='_blank'
                                    transition:name={`project-s-${name}-${project}`}
                                >
                                    <Image
                                        src={icon}
                                        class='h-7 min-w-max w-min'
                                        alt={name}
                                    />
                                </a>
                            ))
                        }
                    </div>
                </div>
            </div>
            <div>
                <h1 class='text-4xl font-bold text-white md:text-black pb-1'>
                    {title}
                </h1>
                <p
                    class='mb-4 leading-tight text-neutral-100 md:text-neutral-800'
                >
                    {shortDescription}
                </p>
                <p class='text-neutral-100 md:text-neutral-800'>
                    {description}
                </p>
            </div>
        </div>
    </main>
</Layout>
